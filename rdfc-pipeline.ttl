@prefix : <https://w3id.org/conn#>.
@prefix js: <https://w3id.org/conn/js#>.
@prefix owl: <http://www.w3.org/2002/07/owl#>.
@prefix xsd: <http://www.w3.org/2001/XMLSchema#>.
@prefix rdfl: <https://w3id.org/rdf-lens/ontology#>.

<> owl:imports <./node_modules/@rdfc/js-runner/ontology.ttl>,
    <./node_modules/ldes-client/processor.ttl>,
    <./node_modules/@rdfc/sparql-ingest-processor-ts/processors.ttl>.

#########################################
# Channel definitions
#########################################

# Channel for js:LdesClient -> js:SPARQLIngest
<raw-member/reader> a js:JsReaderChannel.
<raw-member/writer> a js:JsWriterChannel.
[ ] a js:JsChannel;
   :reader <raw-member/reader>;
   :writer <raw-member/writer>.


#########################################
# Processor definitions
#########################################

# Processor to read member events from an LDES
[ ] a js:LdesClient;
    js:output <raw-member/writer>;
    js:url [
        a rdfl:EnvVariable;
        rdfl:envDefault "${LDES}";
        rdfl:envKey "LDES"
    ];
    js:ordered [
        a rdfl:EnvVariable;
        rdfl:envDefault "none";
        rdfl:envKey "ORDER"
    ];
    js:follow [
        a rdfl:EnvVariable;
        rdfl:envDefault "false"^^xsd:boolean;
        rdfl:envKey "FOLLOW"
    ];
    js:interval [
        a rdfl:EnvVariable;
        rdfl:envDefault "5000"^^xsd:integer; # Polling frequency in milliseconds
        rdfl:envKey "POLLING_FREQUENCY"
    ];
    js:before [
        a rdfl:EnvVariable;
        rdfl:envDefault "5000-01-01T00:00:00.000Z"^^xsd:dateTime;
        rdfl:envKey "BEFORE"
    ];
    js:after [
        a rdfl:EnvVariable;
        rdfl:envDefault "-5000-01-01T00:00:00.000Z"^^xsd:dateTime;
        rdfl:envKey "AFTER"
    ];
    js:materialize [
        a rdfl:EnvVariable;
        rdfl:envDefault "false"^^xsd:boolean;
        rdfl:envKey "MATERIALIZE"
    ];
    js:lastVersionOnly [
        a rdfl:EnvVariable;
        rdfl:envDefault "false"^^xsd:boolean;
        rdfl:envKey "LAST_VERSION_ONLY"
    ];
    js:shapeFile "${SHAPE}";
    js:fetch [
        js:concurrent [
            a rdfl:EnvVariable;
            rdfl:envDefault "10"^^xsd:integer;
            rdfl:envKey "CONCURRENT_FETCHES"
        ];
        js:retry [
            js:code 408, 425, 429, 500, 502, 503, 504;
            js:maxRetry 15
        ]
    ];
    js:savePath </state/ldes-client_state.json>.

# Processor to write SDS members into a SPARQL endpoint via SPARQL UPDATE queries
[ ] a js:SPARQLIngest; 
    js:memberStream <raw-member/reader>;
    js:ingestConfig [
        js:memberIsGraph false;
        js:targetNamedGraph "${TARGET_GRAPH}";
        js:graphStoreUrl [ # SPARQL endpoint URL
            a rdfl:EnvVariable;
            rdfl:envDefault "${SPARQL_ENDPOINT}";
            rdfl:envKey "SPARQL_ENDPOINT"
        ];
        js:maxQueryLength [ # Maximum numer of BGPs allowed in a single INSERT DATA query
            a rdfl:EnvVariable;
            rdfl:envDefault "500"^^xsd:integer;
            rdfl:envKey "MAX_QUERY_LENGTH"
        ];
        js:accessToken "${ACCESS_TOKEN}" # Required for Qlever
    ].